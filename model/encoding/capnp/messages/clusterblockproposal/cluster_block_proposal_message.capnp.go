// Code generated by capnpc-go. DO NOT EDIT.

package capnp

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	capnp2 "github.com/onflow/flow-go/model/encoding/capnp/messages/transactionbody"
)

type QuorumCertificateMessage capnp.Struct

// QuorumCertificateMessage_TypeID is the unique identifier for the type QuorumCertificateMessage.
const QuorumCertificateMessage_TypeID = 0xd95479d705741cb0

func NewQuorumCertificateMessage(s *capnp.Segment) (QuorumCertificateMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return QuorumCertificateMessage(st), err
}

func NewRootQuorumCertificateMessage(s *capnp.Segment) (QuorumCertificateMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return QuorumCertificateMessage(st), err
}

func ReadRootQuorumCertificateMessage(msg *capnp.Message) (QuorumCertificateMessage, error) {
	root, err := msg.Root()
	return QuorumCertificateMessage(root.Struct()), err
}

func (s QuorumCertificateMessage) String() string {
	str, _ := text.Marshal(0xd95479d705741cb0, capnp.Struct(s))
	return str
}

func (s QuorumCertificateMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (QuorumCertificateMessage) DecodeFromPtr(p capnp.Ptr) QuorumCertificateMessage {
	return QuorumCertificateMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s QuorumCertificateMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s QuorumCertificateMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s QuorumCertificateMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s QuorumCertificateMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s QuorumCertificateMessage) View() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s QuorumCertificateMessage) SetView(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s QuorumCertificateMessage) BlockID() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s QuorumCertificateMessage) HasBlockID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s QuorumCertificateMessage) SetBlockID(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s QuorumCertificateMessage) SignerIndices() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s QuorumCertificateMessage) HasSignerIndices() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s QuorumCertificateMessage) SetSignerIndices(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s QuorumCertificateMessage) SigData() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return []byte(p.Data()), err
}

func (s QuorumCertificateMessage) HasSigData() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s QuorumCertificateMessage) SetSigData(v []byte) error {
	return capnp.Struct(s).SetData(2, v)
}

// QuorumCertificateMessage_List is a list of QuorumCertificateMessage.
type QuorumCertificateMessage_List = capnp.StructList[QuorumCertificateMessage]

// NewQuorumCertificateMessage creates a new list of QuorumCertificateMessage.
func NewQuorumCertificateMessage_List(s *capnp.Segment, sz int32) (QuorumCertificateMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[QuorumCertificateMessage](l), err
}

// QuorumCertificateMessage_Future is a wrapper for a QuorumCertificateMessage promised by a client call.
type QuorumCertificateMessage_Future struct{ *capnp.Future }

func (f QuorumCertificateMessage_Future) Struct() (QuorumCertificateMessage, error) {
	p, err := f.Future.Ptr()
	return QuorumCertificateMessage(p.Struct()), err
}

type TimeoutCertificateMessage capnp.Struct

// TimeoutCertificateMessage_TypeID is the unique identifier for the type TimeoutCertificateMessage.
const TimeoutCertificateMessage_TypeID = 0xb75e667200da959b

func NewTimeoutCertificateMessage(s *capnp.Segment) (TimeoutCertificateMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return TimeoutCertificateMessage(st), err
}

func NewRootTimeoutCertificateMessage(s *capnp.Segment) (TimeoutCertificateMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return TimeoutCertificateMessage(st), err
}

func ReadRootTimeoutCertificateMessage(msg *capnp.Message) (TimeoutCertificateMessage, error) {
	root, err := msg.Root()
	return TimeoutCertificateMessage(root.Struct()), err
}

func (s TimeoutCertificateMessage) String() string {
	str, _ := text.Marshal(0xb75e667200da959b, capnp.Struct(s))
	return str
}

func (s TimeoutCertificateMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeoutCertificateMessage) DecodeFromPtr(p capnp.Ptr) TimeoutCertificateMessage {
	return TimeoutCertificateMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeoutCertificateMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeoutCertificateMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeoutCertificateMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeoutCertificateMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TimeoutCertificateMessage) View() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s TimeoutCertificateMessage) SetView(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s TimeoutCertificateMessage) NewestQCViews() (capnp.UInt64List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.UInt64List(p.List()), err
}

func (s TimeoutCertificateMessage) HasNewestQCViews() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TimeoutCertificateMessage) SetNewestQCViews(v capnp.UInt64List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewNewestQCViews sets the newestQCViews field to a newly
// allocated capnp.UInt64List, preferring placement in s's segment.
func (s TimeoutCertificateMessage) NewNewestQCViews(n int32) (capnp.UInt64List, error) {
	l, err := capnp.NewUInt64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.UInt64List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s TimeoutCertificateMessage) NewestQC() (QuorumCertificateMessage, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return QuorumCertificateMessage(p.Struct()), err
}

func (s TimeoutCertificateMessage) HasNewestQC() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s TimeoutCertificateMessage) SetNewestQC(v QuorumCertificateMessage) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewNewestQC sets the newestQC field to a newly
// allocated QuorumCertificateMessage struct, preferring placement in s's segment.
func (s TimeoutCertificateMessage) NewNewestQC() (QuorumCertificateMessage, error) {
	ss, err := NewQuorumCertificateMessage(capnp.Struct(s).Segment())
	if err != nil {
		return QuorumCertificateMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s TimeoutCertificateMessage) SignerIndices() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return []byte(p.Data()), err
}

func (s TimeoutCertificateMessage) HasSignerIndices() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s TimeoutCertificateMessage) SetSignerIndices(v []byte) error {
	return capnp.Struct(s).SetData(2, v)
}

func (s TimeoutCertificateMessage) SigData() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return []byte(p.Data()), err
}

func (s TimeoutCertificateMessage) HasSigData() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s TimeoutCertificateMessage) SetSigData(v []byte) error {
	return capnp.Struct(s).SetData(3, v)
}

// TimeoutCertificateMessage_List is a list of TimeoutCertificateMessage.
type TimeoutCertificateMessage_List = capnp.StructList[TimeoutCertificateMessage]

// NewTimeoutCertificateMessage creates a new list of TimeoutCertificateMessage.
func NewTimeoutCertificateMessage_List(s *capnp.Segment, sz int32) (TimeoutCertificateMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return capnp.StructList[TimeoutCertificateMessage](l), err
}

// TimeoutCertificateMessage_Future is a wrapper for a TimeoutCertificateMessage promised by a client call.
type TimeoutCertificateMessage_Future struct{ *capnp.Future }

func (f TimeoutCertificateMessage_Future) Struct() (TimeoutCertificateMessage, error) {
	p, err := f.Future.Ptr()
	return TimeoutCertificateMessage(p.Struct()), err
}
func (p TimeoutCertificateMessage_Future) NewestQC() QuorumCertificateMessage_Future {
	return QuorumCertificateMessage_Future{Future: p.Future.Field(1, nil)}
}

type HeaderMessage capnp.Struct

// HeaderMessage_TypeID is the unique identifier for the type HeaderMessage.
const HeaderMessage_TypeID = 0x8a564040dd16e413

func NewHeaderMessage(s *capnp.Segment) (HeaderMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 8})
	return HeaderMessage(st), err
}

func NewRootHeaderMessage(s *capnp.Segment) (HeaderMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 8})
	return HeaderMessage(st), err
}

func ReadRootHeaderMessage(msg *capnp.Message) (HeaderMessage, error) {
	root, err := msg.Root()
	return HeaderMessage(root.Struct()), err
}

func (s HeaderMessage) String() string {
	str, _ := text.Marshal(0x8a564040dd16e413, capnp.Struct(s))
	return str
}

func (s HeaderMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (HeaderMessage) DecodeFromPtr(p capnp.Ptr) HeaderMessage {
	return HeaderMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s HeaderMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s HeaderMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s HeaderMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s HeaderMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s HeaderMessage) ChainID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s HeaderMessage) HasChainID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s HeaderMessage) ChainIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s HeaderMessage) SetChainID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s HeaderMessage) ParentID() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s HeaderMessage) HasParentID() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s HeaderMessage) SetParentID(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s HeaderMessage) Height() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s HeaderMessage) SetHeight(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s HeaderMessage) PayloadHash() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return []byte(p.Data()), err
}

func (s HeaderMessage) HasPayloadHash() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s HeaderMessage) SetPayloadHash(v []byte) error {
	return capnp.Struct(s).SetData(2, v)
}

func (s HeaderMessage) Timestamp() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s HeaderMessage) SetTimestamp(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

func (s HeaderMessage) View() uint64 {
	return capnp.Struct(s).Uint64(16)
}

func (s HeaderMessage) SetView(v uint64) {
	capnp.Struct(s).SetUint64(16, v)
}

func (s HeaderMessage) ParentView() uint64 {
	return capnp.Struct(s).Uint64(24)
}

func (s HeaderMessage) SetParentView(v uint64) {
	capnp.Struct(s).SetUint64(24, v)
}

func (s HeaderMessage) ParentVoterIndices() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return []byte(p.Data()), err
}

func (s HeaderMessage) HasParentVoterIndices() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s HeaderMessage) SetParentVoterIndices(v []byte) error {
	return capnp.Struct(s).SetData(3, v)
}

func (s HeaderMessage) ParentVoterSigData() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return []byte(p.Data()), err
}

func (s HeaderMessage) HasParentVoterSigData() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s HeaderMessage) SetParentVoterSigData(v []byte) error {
	return capnp.Struct(s).SetData(4, v)
}

func (s HeaderMessage) ProposerID() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return []byte(p.Data()), err
}

func (s HeaderMessage) HasProposerID() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s HeaderMessage) SetProposerID(v []byte) error {
	return capnp.Struct(s).SetData(5, v)
}

func (s HeaderMessage) ProposerSigData() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return []byte(p.Data()), err
}

func (s HeaderMessage) HasProposerSigData() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s HeaderMessage) SetProposerSigData(v []byte) error {
	return capnp.Struct(s).SetData(6, v)
}

func (s HeaderMessage) LastViewTC() (TimeoutCertificateMessage, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return TimeoutCertificateMessage(p.Struct()), err
}

func (s HeaderMessage) HasLastViewTC() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s HeaderMessage) SetLastViewTC(v TimeoutCertificateMessage) error {
	return capnp.Struct(s).SetPtr(7, capnp.Struct(v).ToPtr())
}

// NewLastViewTC sets the lastViewTC field to a newly
// allocated TimeoutCertificateMessage struct, preferring placement in s's segment.
func (s HeaderMessage) NewLastViewTC() (TimeoutCertificateMessage, error) {
	ss, err := NewTimeoutCertificateMessage(capnp.Struct(s).Segment())
	if err != nil {
		return TimeoutCertificateMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(7, capnp.Struct(ss).ToPtr())
	return ss, err
}

// HeaderMessage_List is a list of HeaderMessage.
type HeaderMessage_List = capnp.StructList[HeaderMessage]

// NewHeaderMessage creates a new list of HeaderMessage.
func NewHeaderMessage_List(s *capnp.Segment, sz int32) (HeaderMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 8}, sz)
	return capnp.StructList[HeaderMessage](l), err
}

// HeaderMessage_Future is a wrapper for a HeaderMessage promised by a client call.
type HeaderMessage_Future struct{ *capnp.Future }

func (f HeaderMessage_Future) Struct() (HeaderMessage, error) {
	p, err := f.Future.Ptr()
	return HeaderMessage(p.Struct()), err
}
func (p HeaderMessage_Future) LastViewTC() TimeoutCertificateMessage_Future {
	return TimeoutCertificateMessage_Future{Future: p.Future.Field(7, nil)}
}

type UntrustedClusterBlockPayloadMessage capnp.Struct

// UntrustedClusterBlockPayloadMessage_TypeID is the unique identifier for the type UntrustedClusterBlockPayloadMessage.
const UntrustedClusterBlockPayloadMessage_TypeID = 0xd8aed3ed1aa156bb

func NewUntrustedClusterBlockPayloadMessage(s *capnp.Segment) (UntrustedClusterBlockPayloadMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return UntrustedClusterBlockPayloadMessage(st), err
}

func NewRootUntrustedClusterBlockPayloadMessage(s *capnp.Segment) (UntrustedClusterBlockPayloadMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return UntrustedClusterBlockPayloadMessage(st), err
}

func ReadRootUntrustedClusterBlockPayloadMessage(msg *capnp.Message) (UntrustedClusterBlockPayloadMessage, error) {
	root, err := msg.Root()
	return UntrustedClusterBlockPayloadMessage(root.Struct()), err
}

func (s UntrustedClusterBlockPayloadMessage) String() string {
	str, _ := text.Marshal(0xd8aed3ed1aa156bb, capnp.Struct(s))
	return str
}

func (s UntrustedClusterBlockPayloadMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UntrustedClusterBlockPayloadMessage) DecodeFromPtr(p capnp.Ptr) UntrustedClusterBlockPayloadMessage {
	return UntrustedClusterBlockPayloadMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UntrustedClusterBlockPayloadMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UntrustedClusterBlockPayloadMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UntrustedClusterBlockPayloadMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UntrustedClusterBlockPayloadMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UntrustedClusterBlockPayloadMessage) Collection() (capnp2.TransactionBodyMessage_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp2.TransactionBodyMessage_List(p.List()), err
}

func (s UntrustedClusterBlockPayloadMessage) HasCollection() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UntrustedClusterBlockPayloadMessage) SetCollection(v capnp2.TransactionBodyMessage_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewCollection sets the collection field to a newly
// allocated capnp2.TransactionBodyMessage_List, preferring placement in s's segment.
func (s UntrustedClusterBlockPayloadMessage) NewCollection(n int32) (capnp2.TransactionBodyMessage_List, error) {
	l, err := capnp2.NewTransactionBodyMessage_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp2.TransactionBodyMessage_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s UntrustedClusterBlockPayloadMessage) ReferenceBlockID() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s UntrustedClusterBlockPayloadMessage) HasReferenceBlockID() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s UntrustedClusterBlockPayloadMessage) SetReferenceBlockID(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

// UntrustedClusterBlockPayloadMessage_List is a list of UntrustedClusterBlockPayloadMessage.
type UntrustedClusterBlockPayloadMessage_List = capnp.StructList[UntrustedClusterBlockPayloadMessage]

// NewUntrustedClusterBlockPayloadMessage creates a new list of UntrustedClusterBlockPayloadMessage.
func NewUntrustedClusterBlockPayloadMessage_List(s *capnp.Segment, sz int32) (UntrustedClusterBlockPayloadMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[UntrustedClusterBlockPayloadMessage](l), err
}

// UntrustedClusterBlockPayloadMessage_Future is a wrapper for a UntrustedClusterBlockPayloadMessage promised by a client call.
type UntrustedClusterBlockPayloadMessage_Future struct{ *capnp.Future }

func (f UntrustedClusterBlockPayloadMessage_Future) Struct() (UntrustedClusterBlockPayloadMessage, error) {
	p, err := f.Future.Ptr()
	return UntrustedClusterBlockPayloadMessage(p.Struct()), err
}

type ClusterBlockProposalMessage capnp.Struct

// ClusterBlockProposalMessage_TypeID is the unique identifier for the type ClusterBlockProposalMessage.
const ClusterBlockProposalMessage_TypeID = 0xd1f22fdbc7a4c159

func NewClusterBlockProposalMessage(s *capnp.Segment) (ClusterBlockProposalMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ClusterBlockProposalMessage(st), err
}

func NewRootClusterBlockProposalMessage(s *capnp.Segment) (ClusterBlockProposalMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ClusterBlockProposalMessage(st), err
}

func ReadRootClusterBlockProposalMessage(msg *capnp.Message) (ClusterBlockProposalMessage, error) {
	root, err := msg.Root()
	return ClusterBlockProposalMessage(root.Struct()), err
}

func (s ClusterBlockProposalMessage) String() string {
	str, _ := text.Marshal(0xd1f22fdbc7a4c159, capnp.Struct(s))
	return str
}

func (s ClusterBlockProposalMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClusterBlockProposalMessage) DecodeFromPtr(p capnp.Ptr) ClusterBlockProposalMessage {
	return ClusterBlockProposalMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClusterBlockProposalMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClusterBlockProposalMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClusterBlockProposalMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClusterBlockProposalMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ClusterBlockProposalMessage) Header() (HeaderMessage, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return HeaderMessage(p.Struct()), err
}

func (s ClusterBlockProposalMessage) HasHeader() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ClusterBlockProposalMessage) SetHeader(v HeaderMessage) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewHeader sets the header field to a newly
// allocated HeaderMessage struct, preferring placement in s's segment.
func (s ClusterBlockProposalMessage) NewHeader() (HeaderMessage, error) {
	ss, err := NewHeaderMessage(capnp.Struct(s).Segment())
	if err != nil {
		return HeaderMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ClusterBlockProposalMessage) Payload() (UntrustedClusterBlockPayloadMessage, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return UntrustedClusterBlockPayloadMessage(p.Struct()), err
}

func (s ClusterBlockProposalMessage) HasPayload() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ClusterBlockProposalMessage) SetPayload(v UntrustedClusterBlockPayloadMessage) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewPayload sets the payload field to a newly
// allocated UntrustedClusterBlockPayloadMessage struct, preferring placement in s's segment.
func (s ClusterBlockProposalMessage) NewPayload() (UntrustedClusterBlockPayloadMessage, error) {
	ss, err := NewUntrustedClusterBlockPayloadMessage(capnp.Struct(s).Segment())
	if err != nil {
		return UntrustedClusterBlockPayloadMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// ClusterBlockProposalMessage_List is a list of ClusterBlockProposalMessage.
type ClusterBlockProposalMessage_List = capnp.StructList[ClusterBlockProposalMessage]

// NewClusterBlockProposalMessage creates a new list of ClusterBlockProposalMessage.
func NewClusterBlockProposalMessage_List(s *capnp.Segment, sz int32) (ClusterBlockProposalMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[ClusterBlockProposalMessage](l), err
}

// ClusterBlockProposalMessage_Future is a wrapper for a ClusterBlockProposalMessage promised by a client call.
type ClusterBlockProposalMessage_Future struct{ *capnp.Future }

func (f ClusterBlockProposalMessage_Future) Struct() (ClusterBlockProposalMessage, error) {
	p, err := f.Future.Ptr()
	return ClusterBlockProposalMessage(p.Struct()), err
}
func (p ClusterBlockProposalMessage_Future) Header() HeaderMessage_Future {
	return HeaderMessage_Future{Future: p.Future.Field(0, nil)}
}
func (p ClusterBlockProposalMessage_Future) Payload() UntrustedClusterBlockPayloadMessage_Future {
	return UntrustedClusterBlockPayloadMessage_Future{Future: p.Future.Field(1, nil)}
}

const schema_9e050064d5c9cb20 = "x\xda\x8c\x94Oh\x1cU\x1c\xc7\xbf\xdf\xf7vv\x93" +
	"\xb4\xa9\xbb\xcc (B<\x18\xd0\xe2\x9f\x04\xeb\xc1\xa0" +
	"4MVH\x02\x81}N\x0c&D\xe3d\xf7%;" +
	"\xb8\xff\x9c\x99\x98\x06Z\xa2RA\x8b\x82\x07\x0b\xb5\x8a" +
	"\xb4\x10\x10A\xa47\x0f\x9e<I\xf1$R\xfc\x87\xf4" +
	"\"x\xf2R\x10Q\x84\x95\xdfl\xb2\xbbM0x\x1b" +
	">\xef\xbbo\x7f\xef;\x9f7c\xcbj23>\xbc" +
	"\x93\x812\xa7\x9cl\xdb\xfd\xf5\xee_&'\x17/\xc2" +
	"\x8c2s\xeb\xfeon\xdc\xac8\x1f;\x039\xe0\xf1" +
	"Qu\x85\xee\xd3J\x1e\x9fT\x9f(\xf0\xcf\x0f/\xfd" +
	"\x14\xad\xbf\xf8\x85\x19%\xbb\xd1\x8c\xac\xdf\xe3\xfcM\xf7" +
	"\x09G\x1e\xc7\x9d\x11\x82\xed\xa5\xafv\xbf\xfe\xf9\xb1\xdb" +
	"\xdf\xa20\xda\xcb\xa6{\xbd\x90\x1dR\xee\xf9l\x0ep" +
	"\xb7\xb3[`\xfb\xcb\xc5k\xf7\xfe\xfe\xdd\xe7?\x1c\x8e" +
	"\xde\xcc\xce)\xf7\xaf4\xfaG\x1a\xbd~_\xe2|\xbf" +
	"\xbd\xf0#\xee\x18AK\xb6\x9e\xbbM\xf7\xed\x9cd\xdf" +
	"\xcc\xfd\x86\xa5v\xb9\xb6\x19'6Zu\xd6j\xcd\xf2" +
	"\xcb\xab\xad\xa8\xd9j\xc6Am\xb5n\xe38\xd8\xb0\x8f" +
	"\x96\x83V\xa351c\x83\x8a\x8d\xe6\x85\xe9\x0d[\"" +
	"\xcd\x98\xce\x00\x19\x02\xee\x19N\x01\xfeS\xd4\xf4g\xa8" +
	"X =\x0a\x7f\x86s\x80_\x14^\xa2\"\x95G\x05" +
	"\xb8\xf3\x9c\x00\xfc\x19\xc1\x0b\x12\xd7\xca\xa3\x06\\\xc35" +
	"\xc0/\x09_\x11\x9e\xa1\xc7\x0c\xe0.\xf1Y\xc0\x7f^" +
	"xE\xb8\xa3<:\x80\x1b\xf0$\xe0\xaf\x08\xaf\x0a\xcf" +
	"j\x8fY\xc0\xb5\\\x06\xfc\x8a\xf0\x96\xf0\x9c\xf6(\xc7" +
	"\xad\xf3\x0a\xe0\xb7\x84\x9f\x13>\x90\xf18 \xed\xa6\xfc" +
	"\x9c\xf0\xb7\x84\x0f:\x1e\x07\xa5\x9et\x9f\x0b\xc2\xdf\x13" +
	">\x94\xf58\x04\xb8\xef\xf2\x0d\xc0\x7fG\xf8e\xe1\xc7" +
	"r\x1e\x8f\x01\xee\xa54\xff\xbe\xf0\xabT\xdc)W\x83" +
	"\xb01[\xe4q(\x1e\x07\xdb\xad \xb2\x8dd\xb6\x08" +
	"\x80\xc3P\x1c\x06OWm\xb8QM8\x08\xc5\xc14" +
	"\xb2]k\x06\x95\x19\xe4\x82\xb8\xba\x1fj'a\xdd\xc6" +
	"IP\x07[t\xa0\xe8\x80w\xbd\x1a\xda\xad\xbe\x9f\xc9" +
	"\xce\x8b!\xf4a\xd8db\xa3\xd9F%,k\x1bw" +
	"\xb7\xec_\xf4\xc3\x8db\xa0\x93\xa0\xb7\x98*`#\xe8" +
	"\xd9\xe2!\xc84\x9e\x04\xdd3\xb4kA\x9c,\x86v" +
	"\x0bza\x9a\xf9}\xf9A\xe6\xc1\xae]\xd9#\xedZ" +
	"\x08\xeb\xb6\xb9\x99L\xdb(\x09\xd7\xc3r\x90\xd8\xf9\xd3" +
	"\x9d\x80\x98\xe6\xed\x9bV8\x7f\x120g5\xcd\x05\xc5" +
	"=\xcb\x0a\xafG\x80yM\xd3|\xa4XPL\x1d+" +
	"|0\x07\x98\xcb\x9af\xb7'X\xe1\x9a$\xafj\x9a" +
	"\xcf\xc4.\x9d\xdaU\xf8t\x0a0\xbb\x9a\xe6\xba:\xd0" +
	"j\xc3n\xd981\xd3\x18\x91\xd3\xc5<\x01\x964\xd3" +
	"\xe5\x13\xfd\xcb\x00\xf3\xbd\x1b\xb7w\xee8\xdchH\xef" +
	"\x18\xa9\x84\xe5^\xf1;q\xa7\xbdny\xfb\xfd\xe4\x8e" +
	"\xecg\xba\x93\x9a\x92Li/2\xdfI\x00R\xd1@" +
	"\xb7\xa2\x87&\x00\xf3\x80\xa6\x19\xeb\xdd\xc4\xc2#r\xc8" +
	"\x075\xcd)%\xce\xc9Uf\xbe\xf7M\xeb\xcc\xbc\xb3" +
	"g\x1f\xf3\xbdO\xcd\x81\xb78p\xe4\x94\xcf5\x92H" +
	"r\x95;\xc6\xedl\xfa_\xd3.\xef\x0dV\xec\x9b\xf6" +
	"\xccE\xc0\x145MI\xb1]n\xd6j\xb6\x9c\x84\xd0" +
	"\xcd\xc6\xfe+\xc8\xb7o5\x1e\xfeg\xdc\x9d\xbf!\x03" +
	"\xca\xcb\x88\xec\xba\x8dl\xa3L\x9b\xfe\xa9\\\xb2C\x15" +
	"\x1f\xad\xa0\xd9lF\x9b\xf5~\x03\xedH\xd7\xc0|w" +
	"\xe0@\x0c\\\xd14\xd5\x9e\x81V\xda}I\xd3\xd4\xfa" +
	"\x0c\x0cE\xb6\xaa\xa6I\xfa\x0c|E\x925Ms\xf6" +
	"\x80l;k\x9d\xb1\xbbC\xffO\x7f\xfe\x0d\x00\x00\xff" +
	"\xff\xf4\xa6\x97\xa7"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_9e050064d5c9cb20,
		Nodes: []uint64{
			0x8a564040dd16e413,
			0xb75e667200da959b,
			0xd1f22fdbc7a4c159,
			0xd8aed3ed1aa156bb,
			0xd95479d705741cb0,
		},
		Compressed: true,
	})
}
