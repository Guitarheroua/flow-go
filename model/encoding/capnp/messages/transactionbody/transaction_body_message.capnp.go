// Code generated by capnpc-go. DO NOT EDIT.

package capnp

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type ProposalKeyMessage capnp.Struct

// ProposalKeyMessage_TypeID is the unique identifier for the type ProposalKeyMessage.
const ProposalKeyMessage_TypeID = 0xbdccbef3037d221d

func NewProposalKeyMessage(s *capnp.Segment) (ProposalKeyMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return ProposalKeyMessage(st), err
}

func NewRootProposalKeyMessage(s *capnp.Segment) (ProposalKeyMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return ProposalKeyMessage(st), err
}

func ReadRootProposalKeyMessage(msg *capnp.Message) (ProposalKeyMessage, error) {
	root, err := msg.Root()
	return ProposalKeyMessage(root.Struct()), err
}

func (s ProposalKeyMessage) String() string {
	str, _ := text.Marshal(0xbdccbef3037d221d, capnp.Struct(s))
	return str
}

func (s ProposalKeyMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ProposalKeyMessage) DecodeFromPtr(p capnp.Ptr) ProposalKeyMessage {
	return ProposalKeyMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ProposalKeyMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ProposalKeyMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ProposalKeyMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ProposalKeyMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ProposalKeyMessage) Address() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s ProposalKeyMessage) HasAddress() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ProposalKeyMessage) SetAddress(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s ProposalKeyMessage) KeyIndex() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s ProposalKeyMessage) SetKeyIndex(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s ProposalKeyMessage) SequenceNumber() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s ProposalKeyMessage) SetSequenceNumber(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

// ProposalKeyMessage_List is a list of ProposalKeyMessage.
type ProposalKeyMessage_List = capnp.StructList[ProposalKeyMessage]

// NewProposalKeyMessage creates a new list of ProposalKeyMessage.
func NewProposalKeyMessage_List(s *capnp.Segment, sz int32) (ProposalKeyMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[ProposalKeyMessage](l), err
}

// ProposalKeyMessage_Future is a wrapper for a ProposalKeyMessage promised by a client call.
type ProposalKeyMessage_Future struct{ *capnp.Future }

func (f ProposalKeyMessage_Future) Struct() (ProposalKeyMessage, error) {
	p, err := f.Future.Ptr()
	return ProposalKeyMessage(p.Struct()), err
}

type TransactionSignatureMessage capnp.Struct

// TransactionSignatureMessage_TypeID is the unique identifier for the type TransactionSignatureMessage.
const TransactionSignatureMessage_TypeID = 0xa26fc560df9be0c9

func NewTransactionSignatureMessage(s *capnp.Segment) (TransactionSignatureMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return TransactionSignatureMessage(st), err
}

func NewRootTransactionSignatureMessage(s *capnp.Segment) (TransactionSignatureMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return TransactionSignatureMessage(st), err
}

func ReadRootTransactionSignatureMessage(msg *capnp.Message) (TransactionSignatureMessage, error) {
	root, err := msg.Root()
	return TransactionSignatureMessage(root.Struct()), err
}

func (s TransactionSignatureMessage) String() string {
	str, _ := text.Marshal(0xa26fc560df9be0c9, capnp.Struct(s))
	return str
}

func (s TransactionSignatureMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TransactionSignatureMessage) DecodeFromPtr(p capnp.Ptr) TransactionSignatureMessage {
	return TransactionSignatureMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TransactionSignatureMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TransactionSignatureMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TransactionSignatureMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TransactionSignatureMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TransactionSignatureMessage) Address() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s TransactionSignatureMessage) HasAddress() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TransactionSignatureMessage) SetAddress(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s TransactionSignatureMessage) SignerIndex() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TransactionSignatureMessage) SetSignerIndex(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TransactionSignatureMessage) KeyIndex() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s TransactionSignatureMessage) SetKeyIndex(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s TransactionSignatureMessage) Signature() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s TransactionSignatureMessage) HasSignature() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s TransactionSignatureMessage) SetSignature(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

// TransactionSignatureMessage_List is a list of TransactionSignatureMessage.
type TransactionSignatureMessage_List = capnp.StructList[TransactionSignatureMessage]

// NewTransactionSignatureMessage creates a new list of TransactionSignatureMessage.
func NewTransactionSignatureMessage_List(s *capnp.Segment, sz int32) (TransactionSignatureMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[TransactionSignatureMessage](l), err
}

// TransactionSignatureMessage_Future is a wrapper for a TransactionSignatureMessage promised by a client call.
type TransactionSignatureMessage_Future struct{ *capnp.Future }

func (f TransactionSignatureMessage_Future) Struct() (TransactionSignatureMessage, error) {
	p, err := f.Future.Ptr()
	return TransactionSignatureMessage(p.Struct()), err
}

type TransactionBodyMessage capnp.Struct

// TransactionBodyMessage_TypeID is the unique identifier for the type TransactionBodyMessage.
const TransactionBodyMessage_TypeID = 0xc94d1331fc2c6edf

func NewTransactionBodyMessage(s *capnp.Segment) (TransactionBodyMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 8})
	return TransactionBodyMessage(st), err
}

func NewRootTransactionBodyMessage(s *capnp.Segment) (TransactionBodyMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 8})
	return TransactionBodyMessage(st), err
}

func ReadRootTransactionBodyMessage(msg *capnp.Message) (TransactionBodyMessage, error) {
	root, err := msg.Root()
	return TransactionBodyMessage(root.Struct()), err
}

func (s TransactionBodyMessage) String() string {
	str, _ := text.Marshal(0xc94d1331fc2c6edf, capnp.Struct(s))
	return str
}

func (s TransactionBodyMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TransactionBodyMessage) DecodeFromPtr(p capnp.Ptr) TransactionBodyMessage {
	return TransactionBodyMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TransactionBodyMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TransactionBodyMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TransactionBodyMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TransactionBodyMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TransactionBodyMessage) ReferenceBlockID() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s TransactionBodyMessage) HasReferenceBlockID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TransactionBodyMessage) SetReferenceBlockID(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s TransactionBodyMessage) Script() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s TransactionBodyMessage) HasScript() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s TransactionBodyMessage) SetScript(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s TransactionBodyMessage) Arguments() (capnp.DataList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.DataList(p.List()), err
}

func (s TransactionBodyMessage) HasArguments() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s TransactionBodyMessage) SetArguments(v capnp.DataList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewArguments sets the arguments field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s TransactionBodyMessage) NewArguments(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s TransactionBodyMessage) GasLimit() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s TransactionBodyMessage) SetGasLimit(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s TransactionBodyMessage) ProposalKey() (ProposalKeyMessage, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return ProposalKeyMessage(p.Struct()), err
}

func (s TransactionBodyMessage) HasProposalKey() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s TransactionBodyMessage) SetProposalKey(v ProposalKeyMessage) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewProposalKey sets the proposalKey field to a newly
// allocated ProposalKeyMessage struct, preferring placement in s's segment.
func (s TransactionBodyMessage) NewProposalKey() (ProposalKeyMessage, error) {
	ss, err := NewProposalKeyMessage(capnp.Struct(s).Segment())
	if err != nil {
		return ProposalKeyMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s TransactionBodyMessage) Payer() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return []byte(p.Data()), err
}

func (s TransactionBodyMessage) HasPayer() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s TransactionBodyMessage) SetPayer(v []byte) error {
	return capnp.Struct(s).SetData(4, v)
}

func (s TransactionBodyMessage) Authorizers() (capnp.DataList, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.DataList(p.List()), err
}

func (s TransactionBodyMessage) HasAuthorizers() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s TransactionBodyMessage) SetAuthorizers(v capnp.DataList) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewAuthorizers sets the authorizers field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s TransactionBodyMessage) NewAuthorizers(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s TransactionBodyMessage) PayloadSignatures() (TransactionSignatureMessage_List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return TransactionSignatureMessage_List(p.List()), err
}

func (s TransactionBodyMessage) HasPayloadSignatures() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s TransactionBodyMessage) SetPayloadSignatures(v TransactionSignatureMessage_List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewPayloadSignatures sets the payloadSignatures field to a newly
// allocated TransactionSignatureMessage_List, preferring placement in s's segment.
func (s TransactionBodyMessage) NewPayloadSignatures(n int32) (TransactionSignatureMessage_List, error) {
	l, err := NewTransactionSignatureMessage_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return TransactionSignatureMessage_List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s TransactionBodyMessage) EnvelopeSignatures() (TransactionSignatureMessage_List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return TransactionSignatureMessage_List(p.List()), err
}

func (s TransactionBodyMessage) HasEnvelopeSignatures() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s TransactionBodyMessage) SetEnvelopeSignatures(v TransactionSignatureMessage_List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewEnvelopeSignatures sets the envelopeSignatures field to a newly
// allocated TransactionSignatureMessage_List, preferring placement in s's segment.
func (s TransactionBodyMessage) NewEnvelopeSignatures(n int32) (TransactionSignatureMessage_List, error) {
	l, err := NewTransactionSignatureMessage_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return TransactionSignatureMessage_List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}

// TransactionBodyMessage_List is a list of TransactionBodyMessage.
type TransactionBodyMessage_List = capnp.StructList[TransactionBodyMessage]

// NewTransactionBodyMessage creates a new list of TransactionBodyMessage.
func NewTransactionBodyMessage_List(s *capnp.Segment, sz int32) (TransactionBodyMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 8}, sz)
	return capnp.StructList[TransactionBodyMessage](l), err
}

// TransactionBodyMessage_Future is a wrapper for a TransactionBodyMessage promised by a client call.
type TransactionBodyMessage_Future struct{ *capnp.Future }

func (f TransactionBodyMessage_Future) Struct() (TransactionBodyMessage, error) {
	p, err := f.Future.Ptr()
	return TransactionBodyMessage(p.Struct()), err
}
func (p TransactionBodyMessage_Future) ProposalKey() ProposalKeyMessage_Future {
	return ProposalKeyMessage_Future{Future: p.Future.Field(3, nil)}
}

const schema_b5a009291978d69a = "x\xda\x84\x93\xcdk,E\x14\xc5\xcf\xa9\xea\x99I\xc0" +
	"\x84\x19\xba\x03\x0a\x09\x09\xa2\x90@\"\xc6\xe0\xc2l\x12" +
	"C\x04'\x1f2\x95\xce2\x92\xf4L\x97\x93&3\xdd" +
	"mw\x8f\xcc\x04\xbf\xd6.\xb3\x8c\x1b\xf1\x1f\x10\x04\x97" +
	"\xbas\x11p\xedB\x90\xe8\xca\x95 \xe8F\x88\xb4T" +
	"\xbf\xcc\x07\xef%\xbc\xed\xb9\xbf\xaa:\xe7\xde\xba\xaf\x7f" +
	"\xcamk}&\x12\x10j\xbeT\xceo~\xfb\xf2\xf6" +
	"\xec\xc7\xe8k\xa8E\x8a\xfc\xfa\xe7\xfeK+\xd3_}" +
	"\x87\x92\xa8\x00\x1b\x0b\xfc\x85\xf6[\xac\x00\xf6\x9b\xfc\x03" +
	"\xcc\x17^\xfeD\xfe\xfd\xc3O\xdf?M\x1bdcN" +
	"\\\xd1^3\x07\xed\x15\xf1\x0d\x98\xdf\x86\xabw\xeb\xf6" +
	"\xe1\x8d\xa19AO\x19\xfaF|K\xfb\xf7\xe2\x99_" +
	"EN\xac\xe5Y\xe2\x85\xa9\xd7\xca\xcaA\x14\x9e6#" +
	"\x7fp\xda\xd5i\xea\xb5\xf5k-/\x0e\xe3\xcd\xe3\xfb" +
	"z\x10\x85n\xd0\x0e\xbd\xac\x97\xe8CC\xc8\xb6n\x90" +
	"\xaa*-\xc0\"P\xf3v\x00u\"\xa9\xce\x05I\x87" +
	"F\xd3M@\xf9\x92*\x16\xac\x09:\x14@\xad\xbb\x07" +
	"\xa8\x8e\xa4\xea\x0b\xd6$\x1dJ\xa0\xd6;\x02T&\xa9" +
	">\x17\xfc\xcc\xf3\xfdD\xa7)g 8\x03\xe6i\xd0" +
	"\x0euR\x0fQ\xf1u\x9f\x16\x04-0\xbf\xd0\x83z" +
	"\xe8\xeb>\x00NCp\xfa\x9e4\x1eA=:=\x8c" +
	"Xz$b#\x89\xe2(\xf5:\xfbzP$k\xb3" +
	"H\xf6\xc2(\xd9;&\xd9\xb6\xa4:\x18'\xab\x9b\x10" +
	"\xefJ\xaa\xe3\x89d\xea\x12P\x0dIu\xf2@\x88\x07" +
	"\xed\xea\x0f{:lil\xbd\xd7\xeb6u2*<" +
	"\xcf\xf3\xc4Xv\"\x7fp\xa8\x17\x8b\xaa\xf1\xfd\xca\xc8" +
	"\xf7\x9f_\x00\xea/Iu'X\x1b\x1a\xffw\x13P" +
	"\xffH\x1e\xd1\x18\x17O\x8c\xffg\xba\x7f'\xe9\xbeH" +
	"A\xcab$\xf6\x1c\xf7\x00\xd7\xa1\xa4\xbbd`K:" +
	"\xb4\x00{\x81M\xc0\x9d7\xfa\xb2\xd1K\x96\xc3\x12`" +
	"\xbf\xca7\x00w\xc9\xe8\xabF/\x97\x1c\x96\xcd\xbf," +
	"\xf8e\xa3\xef\x1a\xbdRv\x8a\xdf\xfd6\xaf\x00w\xd7" +
	"\xe8gF\x9f\xaa8\x9c\x02\xec\xf7y\x0d\xb8gF\xff" +
	"\x98\x82y\xa2?\xd0\x89\x0e[\xd4;\x9d\xa8uQ\xdf" +
	"\x05\x86M\xddJ[I\x10g\xa3\x1e{I\xbb\xd7\xd5" +
	"a\x06\xa6\x9c\x05\x1b\x92Ei\x16\xcc\xdb^z\x10t" +
	"\x83l\xb2\xfd\xf1\xfd\xe4Q\xd9\xd7\x03V\xc7\x9b\x06\xb2" +
	"\x0a.\xc6\xde@'\xe3\xcb{\xd9y\x94\x04\x97\xa8\xe8" +
	"\xe4\x99\xebco\xd0\x89<\xdf\xe5pI\xc6\x0e\xaa\xe3" +
	"}\x07\x0bX\x87\x1f\xe9N\x14k\x0eWJ\xea\xc7\xe9" +
	"\xff\x03\x00\x00\xff\xffJ\x94\xfe!"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_b5a009291978d69a,
		Nodes: []uint64{
			0xa26fc560df9be0c9,
			0xbdccbef3037d221d,
			0xc94d1331fc2c6edf,
		},
		Compressed: true,
	})
}
